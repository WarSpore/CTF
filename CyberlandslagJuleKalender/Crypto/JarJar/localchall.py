from Crypto.Util.number import getPrime, isPrime, long_to_bytes, bytes_to_long, getRandomInteger
from base64 import b64encode
import socketserver
from sys import argv, exit
import json
from gmpy2 import mpz

# Placeholder values for secret variables
FLAG = "PLACEHOLDER_FLAG"
NEG_EXP = 123456789  # Substitute with an appropriate decryption exponent if known
VOTE_COUNT = 100     # Example total vote count

RED = 69
BLUE = 420

# Placeholder prime modulus for local testing
p = 182112773609303608355593975466414536423004963921761680083153476656234529045191335526017418462168800246033685760661801320931547403079744733551595553126704744634355240077957014642401670961286054790497365930781009051813180340029831077600422718167526189989438138234107880643400096950208751207487056002028035129159

# Placeholder public key for local testing
ELECTORAL_BOARD_PK = 143807593692545761134223625147510192593863516300333483789484119029811164964747814233265912849602076760105815225850113495587171209239654319140169463159577483617052908603857412861557536638001046046730650300913653755105381262575510335781839336303423236416686115604580354636988694984561195006032142817459456769403

g = 3

def gen_safe_prime():
    while True:
        q = getPrime(1024)
        p = 2*q + 1
        if isPrime(p):
            return p

def f(a, b, c):
    return int(pow(mpz(a), mpz(b), mpz(c)))

def encrypt_vote(vote):
    random = getRandomInteger(128)
    return (f(g, random, p), vote * f(ELECTORAL_BOARD_PK, random, p))

def decrypt_vote(encrypted_vote):
    return (encrypted_vote[1] * f(encrypted_vote[0], NEG_EXP, p)) % p

def get_votes(max_votes, red_votes):
    votes = []
    for _ in range(red_votes):
        votes.append(encrypt_vote(RED))
    for _ in range(max_votes - red_votes):
        votes.append(encrypt_vote(BLUE))
    return votes

def handle():
    VOTE_COUNT
    red_count = getRandomInteger(23) % VOTE_COUNT
    
    votes = get_votes(VOTE_COUNT, red_count)

    x = 106061116290028729544248785561562725226122477969688786279324138815485410068943571618230893283858274046791019478808753830621867280193733250343107265333775153247850823164015570050244975493498000230022516591810330787686481355919657023876377880986795507826910425476120951610728373286089185448121117572738258257604
    w = 851910567880837867820981580868112463734261547099392844364081396822679847672056228789737266095360208612310808017763228841437027143907381005603158693871073428747743791185237227468675467756367543244116376873178601457891890308408752898211670684736262482035923972957823670896966988925303908636202250335921798447720
    dec = decrypt_vote((x, w))
    print(dec)
handle()