from sympy import symbols, Eq, solve, Integer, cbrt
from sympy.ntheory.modular import crt
from Crypto.Util.number import inverse, long_to_bytes

def hastad_broadcast_attack(ciphertexts, moduli, e):
    """
    Perform HÃ¥stad's broadcast attack on the given ciphertexts.
    
    :param ciphertexts: List of ciphertexts
    :param moduli: List of moduli
    :param e: Public exponent (typically small, like 3)
    :return: The decrypted message
    """
    if len(ciphertexts) != len(moduli) or len(ciphertexts) < e:
        raise ValueError("The number of ciphertexts and moduli must be the same and at least equal to the public exponent e")
    
    # Apply the Chinese Remainder Theorem to find the combined ciphertext modulo the product of moduli
    combined_ciphertext, combined_modulus = crt(moduli, ciphertexts)
    print(combined_ciphertext)
    # Find the e-th root of the combined ciphertext
    x = symbols('x')
    equation = Eq(combined_ciphertext, x**3)
    solutions = solve(equation, x)
    message = (solutions[0])
    return long_to_bytes(message)

# Example usage:
# Assume e = 3 and we have three ciphertexts and their corresponding moduli
ciphertexts = [
    52316584568757684099711751493470891112832829826169427214925424430458878197053242845796684529870630728992502569158463006004893953634249205883588149787617981955297022661528130984001587454277023360250539021794124078654635443232336051619798328429652696823018737575207035984217137287470087708539801047502008715334,  # Example ciphertext 1
    71957379974281145037132849866218237427569465949101608138322404059236060629320463647353598218430344356053591079086939229327995712759898086731177741234617396943077434141735948396190061341410420057550443905239798945376584683106304581563856498823879710674114650184657712836892046815584933120371344637156199096637,  # Example ciphertext 2
    86718268236431572822964550821969575730116122891147117540522695389410472616992330327132988953793164526089243790325126253087755433386055855323521169132868995188447028634052239676060969429412434627844034473922346612214232581514233598002234910552766509230867896148303887581883072280436143647316940840451224542686   # Example ciphertext 3
]

moduli = [
    115931562048858059760502221761905872456432461025425567803805953620589704453159599454256938406742000670340462914680761765780351585234162773225987697005285896156017840763359862383697609436856978205050890962435134363169175363803420346801212878672027104525201976827544132872490027212781591176624797967593048231251,
    87097523565075366170084445475358872966709729016198003694773278838042891659827345144101296323654063205125489085383707360759483351215991582384394826150266613720833866019911028082885927573499453091212087572575851324456033355565503306394646407810144832051837327743971833115260510412777737683081588386643591342257,
    92564119262262947374982941155545051172494686830461937993161555321864601399167400376893138825454469369535705719482322610419054592873341746934892766194379291736571192372199556166985797164833358458115602389445239488156612411141181748835677468131866190442656127755437265422660585781468511718723724550831742860667
]

e = 3

# Perform the attack
message = hastad_broadcast_attack(ciphertexts, moduli, e)
print("Recovered message:", message)
