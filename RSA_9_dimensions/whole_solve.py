# Define the values of N and gamma
N = 12551950061305391361769682591853645824454142164006354660748594890465203674895994518975972435507528885623152014078638688067853389293128315013359788310452247166035470837105812135923054941452662044834505713253254770888250661478584019788790756907964004401928510668722946857249955152028909715903064862240436235107701280555816467693331539259548248190399412456941024971456489003117919421630536429645704890849913878972123057302656217796377748694180865542148630429486955684075038420318669037862998326777369014284557821474502575975035009047074384122773113772031583147904934771394681966331229494960038994375776809  # example value
alpha = 600  # example value
modulus = 2^alpha

def compute_s_candidates(N, alpha):
    # Step 1: Define modulus values for 2^alpha and 2^(2*alpha)
    modulus_alpha = 2 ** alpha
    modulus_2alpha = 2 ** (2 * alpha)
    
    # Step 2: Find candidates for l by solving x^2 ≡ N (mod 2^alpha)
    try:
        l_candidates = Mod(N, modulus_alpha).sqrt(all=True)
        print(f"Candidates for l (solutions to x^2 ≡ N mod 2^{alpha}): {l_candidates}")
    except ValueError:
        print("No solutions for x^2 ≡ N mod 2^alpha.")
        return []
    
    # Step 3: Compute s_H and s_0 for each l candidate
    s0_candidates = []
    for l in l_candidates:
        # Convert l to an integer modulo 2^(2*alpha)
        l = Integer(Mod(l, modulus_2alpha))
        
        # Compute l^2 and the value (N - l^2) mod 2^(2*alpha)
        l_square = (l * l) % modulus_2alpha
        N_minus_l_square = (N - l_square) % modulus_2alpha

        # Compute the multiplicative inverse of l modulo 2^(2*alpha)
        try:
            l_inverse = l.inverse_mod(modulus_2alpha)
        except ZeroDivisionError:
            print(f"Cannot compute inverse of l = {l} modulo 2^{2*alpha}. Skipping this l.")
            continue
        
        # Compute s_H = l^(-1) * (N - l^2) mod 2^(2*alpha)
        s_H = (l_inverse * N_minus_l_square) % modulus_2alpha
        
        # Compute s_0 = 2l + s_H mod 2^(2*alpha)
        s_0 = (2 * l + s_H) % modulus_2alpha
        s0_candidates.append(s_0)
        print(f"For l = {l}: s_H = {s_H}, s_0 = {s_0}")
    
    # Step 4: Generate candidates for s by toggling the top 2 bits of s_0
    s_candidates = []
    # trenger ikke å gjøre dette når 2*alpha er langt større enn n/2+2, så er ikke nødvendig i dette tilfelle.
    for s_0 in s0_candidates:
        for i in range(4):  # Toggle the top 2 bits (2^1 and 2^0)
            s = s_0 + (i << (2 * alpha - 2))  # Add the 2 MSB combinations
            s_candidates.append(s)
    
    return s_candidates

def factor_N_via_candidates(N, s_candidates):
    # Step 5: Try to solve x^2 - s * x + N = 0 for each candidate s
    for s in s_candidates:
        # Define the quadratic equation x^2 - s*x + N = 0
        x = var('x')
        equation = x^2 - s * x + N == 0
        
        # Solve the quadratic equation
        solutions = solve(equation, x)
        
        for sol in solutions:
            # Extract the right-hand side value for x and ensure it's an integer
            p_candidate = sol.rhs()
            if p_candidate.is_real():
                p_candidate = Integer(p_candidate)
            
            # Check if p_candidate is an integer factor of N
            if N % p_candidate == 0:
                q_candidate = N // p_candidate
                print(f"Factorization found: p = {p_candidate}, q = {q_candidate}")
                return p_candidate, q_candidate  # Return the factors
    
    print("No factors found with the given candidates.")
    return None, None


# Compute candidates for s_0 and s
s_candidates = compute_s_candidates(N, alpha)

# Attempt to factor N using the candidates
p, q = factor_N_via_candidates(N, s_candidates)
if p and q:
    print(f"Factors of N: p = {p}, q = {q}")
else:
    print("Failed to factor N.")

# Given values


p = 2380979448427696735846844790301050449089268261099080526007299768037475916717506887848869806586148775060027254008502642254061828294294967144662315735587961048261171106399270072931667600172963111901742263770047145959008629236184134997912163597380349505754196920617217686330398200355607540850572891625523

q = 5271759094600415553371952921220132612142851482869176719113557857130959805476857897995683912057884437089249896391138096189756678281029844050369867039849682041715068297037320029440217751845579928808192672287336105590654929874707217325706953373031031714033268195242455938879619247141422076885751388280883

N = 12551950061305391361769682591853645824454142164006354660748594890465203674895994518975972435507528885623152014078638688067853389293128315013359788310452247166035470837105812135923054941452662044834505713253254770888250661478584019788790756907964004401928510668722946857249955152028909715903064862240436235107701280555816467693331539259548248190399412456941024971456489003117919421630536429645704890849913878972123057302656217796377748694180865542148630429486955684075038420318669037862998326777369014284557821474502575975035009047074384122773113772031583147904934771394681966331229494960038994375776809 # Replace with the actual values of p and q
assert p *q == N
e = 65537  # Public exponent


# Step 1: Compute phi(N) should be (g)
phi_N = (p^3-1)*(p^3-p)*(p^3-p^2)* (q^3-1)*(q^3-p)*(q^3-p^2)

# Step 2: Compute the private key d using extended Euclidean algorithm
d = inverse_mod(e, phi_N)

# Step 3: Decrypt the ciphertext matrix
# Assuming the ciphertext matrix ct is already given (replace it with the actual ciphertext)
ct = matrix(Zmod(N), 3, 3, [(2860792525738169805530711187208142854847874891209829565970117688688370790779602037227965745246937700128676495961026902834291276477677468319092436252829298737703986440549241915845947688640727239774079066034071396247332724654079257389610482535322218655012986922605547621113424259271195482862557131339986001540850288793415567826350990480091052074057311603536810642341244920998570415149264422968679139943909318522155730998859684173124794233853433823423209725056173431004526686701110829662265170732225331223932952833722345838643115587861672517252768525125562524807743066385865686411952424440126327922195953, 4459221554288413845324691849645320570938521041936275056003164192202177623134395353619031696105599584464317220887458785443488597945375272204475924352710099238347280037604653289854207322486221451525019792399838798506212658573124269000111972918537719865362071504741079102211014721438975597831821031410841147789905803224494786273178697745329334862255782837878010832512919688440856438199583940930315978103705463879616510409003221319489677035542235213628221877852786213488007958477737032059767102879891044322517389402375058198092020683051293339623551335861476224614855883927620017446180086333403497896975104, 46164996830478624864653933284040467830545531733514511050766142586978528890167451430365717577191900727636634322709408379648402650331674012411958052087366157189768120952316413315854951420352712741441989627120322339569518626558295077644813201099301755908819976131351096937572141878353943036448940216671340456221302990316372848263233012173111475353515287237162458240346534384301594270400640844398201977641541029053621111097790920592088355589281602514490850418958399982996029300789687140747494049577340428320586555166414727753356893584866489600496173429972282171555582875441386995148559097205826811419699), (11584080154064604212880512474641303354423094484133561855130568681791891333613153338264847689873117208323760977556012617398729933045400787295864414570386566145675185810660666721220026678158711387908403277592675293582370358415550426321944448648855781458679002098813037723388905827253289287479770540788848675336358872406352378054733891294405969857734225906601814240339330342443805591920981127031646795653377992733617208154829361000088965546080350771268788509842330560626169183235318345171718523324363798114223794590055379292279404309106367156715373052531569731906134375569205484634121817290470461442240384, 8629387484587935956683262054246190374774435430001552914617585823190821990358175659290682481097165773377447579209455877914944739994393499826352689674828181647280863024839679866498947939607952815378899357489157922746128246989760616050340875099533136942397887313700274360630684975490588712868423722469605720236411694792621443861709207250476817080467975715950584529967254664992931779889592566263263507185796249374850846346839395108911979710543801866537886516118947440083792586250473073276180468872290438473101253354242571924715835534363721113886215138305958728693385322062779446569135715241695871230554971, 2959903427158772687597903530566937683892841593745692307599277272890981874175428910316509335562842264534648911385981108885030535425795069833278417267108359516143670247706236399813407563052672469788175154761546686363601853906591559928700719524759945607541499769019268333856938554210010192498134075264936269221210906791089387259186231296107221002851389754106024244201474805492721077853461410911719989614987664249895109357131064124205437900517653339990131743600657849968859603091147480266399793066787837489947414350418406616442954877840156993145528049819851725954007690375553649157007955322856568534395099), (5527768729280488822907698883558445118963094669485060621070447210933501124432458413059004984509698183192434319680427196483013919168422297543283341204001490664817593891385346970207903610967629095327737845006419799651963095526233358588107880404588829680939881788744616475296866216535464415094500811046380080830895368408644730869881520311041631846471746108466885297321832940226088784646628532116621334351898769625335280615538612384629187913023412696503003258203820079312216741170310178321362303080484152537202806970580048414954727731165688156759576339036006998401631108966755828296229926928436390438989224, 2325141162157220437446715312416705529957070821706435791645084687058448751824077036513076811104904246904517660808904946170112812335934692436392627183959913674502247875503258497310984168342444609942803373623383238045506599549899843295482017149656610065978266819513467938480477377207459558134573660345375671662309456672560083618406951651864154594960544043010316392976840631713099459765664558501611954919712401557346682533742353022028155773715929464555566314509311086614881103550682159930096639436180994430973539290246101739813945545928583514470846949233635120480246661155316772499524896011441820497279162, 1994145127508647760385680398252762967325219451208596893199288209639133917745228193287593465076713855021624041448199938400924635670136402601548164444621687156030760442384291708838075119743920106121867741952224287559969551574640805661309620087171431565484312529675826526748155713342551797717131229190113317369220926898261992265262960412213481349968186868374214021494472649440835597197663909008049587042820031404164968118055352936651135832217758843933860039634993808246227778752215733859087572213906050671455489916364893638766570853840461240157215308904996338836242123255779849094304350247490990900641626)])  # Replace with actual ct
# Decrypt the ciphertext by raising to the power of d mod N
decrypted_matrix = ct**d

# Step 4: Convert the decrypted matrix back to the FLAG chunks
# Since the message was split into 9 chunks, we now reassemble it
decrypted_values = [decrypted_matrix[i, j] for i in range(3) for j in range(3)]
decrypted_bytes = ''.join((str(val)) for val in decrypted_values)

print(decrypted_values)

m = [785566606318999472988506642715460256614405814430776210450655427696163383863991055421783480622935450459646796114133222787035459678615376113117702514724194278628417892003663177712914123340252256112798740798114751812358669964881999406460657423859924076800393281594771259250658276882811609960742879353072561535909877255334112700575494886880796787971170992912972711324534277430415145322416879992368510394632369404981574543453411487471362789676028765702158150825812069, 1039338190639603852537457451221154490135321025013559475476649816579728353997682801333046286837792912226668918453488473303663944205318154350363101720275933887216135987128810161111181189734546152819671881387895349614012082118529964045466670048437489712379604702800651282905463191213544367884150182256036530775291088195388221636701490432469656652034937577609475192467004416263179981560131547934004101044446778157155413974319248152685090627972533431574551966188073833, 1030143145753356420117270560068837160937103359080945971796899877822131207033495658746249831500682337632166691102847867995041838605906282901279923971241358897286519371648302378698115217510330031749670637828937664118358954719558143363704666660202432435790736161429974323851764415743843286537592482791144679909395121264395815913815110038949153602654037376136301488771814855352380586116740324463523487542286486052304460123127033590973757605539851303493906897136656453, 1039338190639603852539512910046405705147971700410732331703827283111501318499765681871265168261173576153821115251593252551971334109582062427646177060486250870905509012906931985245259509351035157248167244903505007590406835614565257802498710864325183141795962054386362602855621117943360300361741359344662100305504765856601140909220559823997728452871491389873883690724022460137815764432656898164437208334878578302122092210637105796730586428163842633516617986901960050, 1083950456848504042205968416569698403822102966519647817208438685065175396514351558492464505262056479098082052657043141736931740412978494607184896226562946568475169695638696355093003140286714312528648157359661365108931702931961292648220669921795509740926879003190814853744785238516843481815802985526381079126127415620688323135577766956148269310589515128166591924067173659128952419565205013405091183988840025399606558296117045520650655169695467422873614795238039923, 982920586515964868044152573964050113815010622879830989203658201353072125827154882006449092580666743208585096670513814677149141965801560245143500546813979483709412314983068039935687016573078145392697043822941052781813062368622957617333254667208403468540882494936145218894628378207958350691310585968477900438218699163872734967327126960465995084488304653905743967363388696852546592631361501400579714772893414502630020385547299396124607581196815564528228477094098793, 1096002428946974780843793556515446873361398761996038771774752939141249511450610442268157094866478237880209243110253628125558258110880765028248501655944892851964357213452000976453811066843492833808406618236355621979410153219564051530170306498564154744707248746965751377969315902230448785349690720296084674388340559412690494387467922243483290877875856036761378709657105824239188854340230340446461017548990319751291083861744225052183444015495463807106494316335672695, 917737297985024176073318298676212198873300951926526165886726397549794239657307906428358916799714549520376512850033153879034962405274788440139827308295455890145221415634355535428861861686208933216905559566160800666234213046039297764883411080612972189336604304606883436224802095788584619654813476605425827704312113360024631576847961237672186729918158793268760230705799117585436018159070131536516591937967901719295708235096679306741793686498977434660759139099573047, 268726765334724602298522599392254443813571212823243878690223505459952795183973453835284686577147151832057963571258002953748027107626725883150345959581111142282447273854269522420573089940565183521640069092066144043136964027092254592343391351417496606166901651859741891583232572097649813255378765942174768297508900533332678091680355695326543892650099799575535046808280322536086813394826254660422146988920652418539803853761117129038205085484119724835522791540209019969186687908988]

decrypted = b"".join(long_to_bytes(val) for val in m)

print(decrypted.decode("utf-8"))